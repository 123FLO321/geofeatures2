%{
    PrecisionName = Precision.split("(")[0]
    Self = GeometryType + CoordinateType + PrecisionName + "Tests"
}%
/*
*   ${Self}.swift
 *
 *   Copyright 2016 Tony Stone
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *   Created by Tony Stone on 2/10/16.
 */
import XCTest
@testable import GeoFeatures2

/*
    NOTE: This file was auto generated by gyb from file CoordinateCollectionTests.swift.gyb using the following command.

    ~/gyb --line-directive '' -DCoordinateType=${CoordinateType} -D"TestTuple0=${TestTuple0}" -D"TestTuple1=${TestTuple1}" -D"ExpectedTuple0=${ExpectedTuple0}" -D"ExpectedTuple1=${ExpectedTuple1}" -D"Precision=${Precision}" -DGeometryType=${GeometryType} -o ${Self}.swift CoordinateCollectionTests.swift.gyb

    Do NOT edit this file directly as it will be regenerated automatically when needed.
*/

class ${Self} : XCTestCase {

    // MARK: Init
    
    func testInit_NoArg ()   {
        XCTAssertEqual(${GeometryType}<${CoordinateType}>(precision: ${Precision}).isEmpty, true)
    }
    
    func testInit_Tuple () {
    
        XCTAssertEqual(
            (${GeometryType}<${CoordinateType}>(elements: [${TestTuple0},${TestTuple1}], precision: ${Precision}).elementsEqual([${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})])
                { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                    return lhs == rhs
            }
        ), true)
    }
    
    // MARK: CollectionType
    
    func testSubscript_Get () {
        let geometry = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0},${TestTuple1}], precision: ${Precision})
        
        XCTAssertEqual(geometry[1] == ${CoordinateType}(tuple: ${ExpectedTuple1}), true)
    }
    
    func testSubscript_Set () {
        var geometry = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0},${TestTuple1}], precision: ${Precision})
        
        geometry[1] = ${CoordinateType}(tuple: ${TestTuple0})
        
        XCTAssertEqual(geometry[1] ==  ${CoordinateType}(tuple: ${ExpectedTuple0}), true)
    }
    
    func testAppendContentsOf_${GeometryType} () {
        
        let geometry1 = ${GeometryType}<${CoordinateType}>(elements: [${TestTuple0},${TestTuple1}], precision: ${Precision})
        var geometry2 = ${GeometryType}<${CoordinateType}>(precision: ${Precision})
        
        geometry2.appendContentsOf(geometry1)
        
        XCTAssertEqual(geometry1 == geometry2, true)
    }
    
    func testAppendContentsOf_Array () {
        
        var geometry = ${GeometryType}<${CoordinateType}>(precision: ${Precision})
        
        geometry.appendContentsOf([${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})])
        
        XCTAssertEqual(geometry.elementsEqual([${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})]) { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
            return lhs == rhs
        }, true)
    }
    
    // MARK: Equal
    
    func testEquals () {
        XCTAssertEqual(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: ${Precision}).equals(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${ExpectedTuple0}), ${CoordinateType}(tuple: ${ExpectedTuple1})], precision: ${Precision})), true)
    }
    
    // MARK: isEmpty
    
    func testIsEmpty () {
        XCTAssertEqual(${GeometryType}<${CoordinateType}>(precision: ${Precision}).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: ${Precision}).isEmpty(), false)
    }
    
    func testCount () {
        XCTAssertEqual(${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: ${Precision}).count, 2)
    }
    
    func testAppend () {
        var geometry = ${GeometryType}<${CoordinateType}>(precision: ${Precision})
        
        geometry.append(${TestTuple0})
        
        XCTAssertEqual(geometry.elementsEqual([${CoordinateType}(tuple: ${ExpectedTuple0})])
            { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                return lhs == rhs
        }, true)
    }

    func testInsert () {
        var geometry = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: ${Precision})
        
        geometry.insert(${CoordinateType}(tuple: ${TestTuple1}), atIndex: 0)

        XCTAssertEqual(geometry.elementsEqual([${CoordinateType}(tuple: ${TestTuple1}), ${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})])
            { (lhs: ${CoordinateType}, rhs: ${CoordinateType}) -> Bool in
                return lhs == rhs
            }, true)
        
    }

    func testRemoveAll () {
        var geometry = ${GeometryType}<${CoordinateType}>(elements: [${CoordinateType}(tuple: ${TestTuple0}), ${CoordinateType}(tuple: ${TestTuple1})], precision: ${Precision})

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }

}
