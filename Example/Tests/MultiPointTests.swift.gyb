//
//  MultiPointTests.swift
//  GeoFeatures2
//
//  Created by Tony Stone on 3/6/16.
//  Copyright Â© 2016 CocoaPods. All rights reserved.
//

import XCTest
import GeoFeatures2

class MultiPointTests: XCTestCase {

    // MARK: Init
    
    func testInit_NoArg ()   {
        XCTAssertEqual(MultiPoint<Coordinate2D>(precision: FloatingPrecision()).isEmpty, true)
    }
    
    func testInit_Tuple () {
    
        XCTAssertEqual(
            (MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision()).elementsEqual([Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))])
                { (lhs: Point<Coordinate2D>, rhs: Point<Coordinate2D>) -> Bool in
                    return lhs == rhs
            }
        ), true)
    }
    
    // MARK: CollectionType
    
    func testSubscript_Get () {
        let geometry = MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision())
        
        XCTAssertEqual(geometry[1] == Point<Coordinate2D>(coordinate: (x: 2.0, y: 2.0)), true)
    }
    
    func testSubscript_Set () {
        var geometry = MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision())
        
        geometry[1] = Point(coordinate: (x: 1.0, y: 1.0))
        
        XCTAssertEqual(geometry[1] == Point<Coordinate2D>(coordinate: (x: 1.0, y: 1.0)), true)
    }
    
    func testAppendContentsOf_MultiPoint () {
        
        let geometry1 = MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision())
        var geometry2 = MultiPoint<Coordinate2D>(precision: FloatingPrecision())
        
        geometry2.appendContentsOf(geometry1)
        
        XCTAssertEqual(geometry1 == geometry2, true)
    }
    
    func testAppendContentsOf_Array () {
        
        var geometry = MultiPoint<Coordinate2D>(precision: FloatingPrecision())
        
        geometry.appendContentsOf([Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))])
        
        XCTAssertEqual(geometry.elementsEqual([Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))]) { (lhs: Point<Coordinate2D>, rhs: Point<Coordinate2D>) -> Bool in
            return lhs == rhs
        }, true)
    }
    
    // MARK: Equal
    
    func testEquals () {
        XCTAssertEqual(MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision()).equals(MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))])), true)
    }
    
    // MARK: isEmpty
    
    func testIsEmpty () {
        XCTAssertEqual(MultiPoint<Coordinate2D>(precision: FloatingPrecision()).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision()).isEmpty(), false)
    }
    
    func testCount () {
        XCTAssertEqual(MultiPoint<Coordinate2D>(elements: [Point(coordinate: (x: 1.0, y: 1.0)),Point(coordinate: (x: 2.0, y: 2.0))], precision: FloatingPrecision()).count, 2)
    }
    
    func testAppend () {
        var lineString = MultiPoint<Coordinate2D>(precision: FloatingPrecision())
        
        lineString.append(Point(coordinate: (x: 1.0, y: 1.0)))
        
        XCTAssertEqual(lineString.elementsEqual([Point(coordinate: (x: 1.0, y: 1.0))])
            { (lhs: Point<Coordinate2D>, rhs: Point<Coordinate2D>) -> Bool in
                return lhs == rhs
        }, true)
    }

}
