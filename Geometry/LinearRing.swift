//===--- CoordinateCollection.swift.gyb -------------------------------------*- swift -*-===//
//
// NOTE: This file was auto generated by gyb from file GeometryCollection.swift.gyb.
//
// Do NOT edit this file directly as it will be regenerated automatically when needed.
//

/*
 *   LinearRing.swift
 *
 *   Copyright 2016 Tony Stone
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *   Created by Tony Stone on 2/14/16.
 */
import Swift

/**
    LinearRing
 
    A LinearRing is a Curve with linear interpolation between Coordinates. Each consecutive pair of
    Coordinates defines a Line segment.
 */
public struct LinearRing<CoordinateType : protocol<Coordinate, _CoordinateConstructable>> : Geometry {
    
    public let precision: Precision
    public let coordinateReferenceSystem: CoordinateReferenceSystem
    
    public init(coordinateReferenceSystem: CoordinateReferenceSystem = defaultCoordinateReferenceSystem, precision: Precision = defaultPrecision) {
        self.precision = precision
        self.coordinateReferenceSystem = coordinateReferenceSystem
    }
    
    public init<S : SequenceType where S.Generator.Element == CoordinateType.TupleType>(coordinates: S, coordinateReferenceSystem: CoordinateReferenceSystem = defaultCoordinateReferenceSystem, precision: Precision = defaultPrecision) {
        
        self.precision = precision
        self.coordinateReferenceSystem = coordinateReferenceSystem
        
        var generator = coordinates.generate()
        
        while let coordinate = generator.next() {
            var convertedCoordinate = CoordinateType(tuple: coordinate)
            
            self.precision.convert(&convertedCoordinate)
            
            self.coordinates.append(convertedCoordinate)
        }
    }
    public init<C : CollectionType where C.Generator.Element == CoordinateType.TupleType>(coordinates: C, coordinateReferenceSystem: CoordinateReferenceSystem = defaultCoordinateReferenceSystem, precision: Precision = defaultPrecision) {
        
        self.precision = precision
        self.coordinateReferenceSystem = coordinateReferenceSystem
        
        var generator = coordinates.generate()
        
        while let coordinate = generator.next() {
            var convertedCoordinate = CoordinateType(tuple: coordinate)
            
            self.precision.convert(&convertedCoordinate)
            
            self.coordinates.append(convertedCoordinate)
        }
    }
    
    public init<S : SequenceType where S.Generator.Element == CoordinateType>(coordinates: S, coordinateReferenceSystem: CoordinateReferenceSystem = defaultCoordinateReferenceSystem, precision: Precision = defaultPrecision) {
        
        self.precision = precision
        self.coordinateReferenceSystem = coordinateReferenceSystem
        
        var generator = coordinates.generate()
        
        while var coordinate = generator.next() {
            self.precision.convert(&coordinate)
            
            self.coordinates.append(coordinate)
        }
    }
    public init<C : CollectionType where C.Generator.Element == CoordinateType>(coordinates: C, coordinateReferenceSystem: CoordinateReferenceSystem = defaultCoordinateReferenceSystem, precision: Precision = defaultPrecision) {
        
        self.precision = precision
        self.coordinateReferenceSystem = coordinateReferenceSystem
        
        var generator = coordinates.generate()
        
        while var coordinate = generator.next() {
            self.precision.convert(&coordinate)
            
            self.coordinates.append(coordinate)
        }
    }
    
    private var coordinates = ContiguousArray<CoordinateType>()
}

// MARK: CoordinateCollectionType conformance

extension LinearRing  {
    
    /**
        - Returns: The number of Coordinate3D objects.
     */
    public var count: Int {
        get { return self.coordinates.count }
    }
    
    /**
        - Returns: The current minimum capacity.
     */
    public var capacity: Int {
        get { return self.coordinates.capacity }
    }
    
    /**
        Reserve enough space to store `minimumCapacity` elements.
     
        - Postcondition: `capacity >= minimumCapacity` and the array has mutable contiguous storage.
     */
    public mutating func reserveCapacity(minimumCapacity: Int) {
        self.coordinates.reserveCapacity(minimumCapacity)
    }
    
    /**
        Reserve enough space to store `minimumCapacity` elements.
     
        - Postcondition: `capacity >= minimumCapacity` and the array has mutable contiguous storage.
     */
    public mutating func append(newElement: CoordinateType) {
        var convertedCoordinate = CoordinateType(other: newElement)
        
        self.precision.convert(&convertedCoordinate)
        
        self.coordinates.append(convertedCoordinate)
    }
    
    /**
        Reserve enough space to store `minimumCapacity` elements.
     
        - Postcondition: `capacity >= minimumCapacity` and the array has mutable contiguous storage.
     */
    public mutating func append(newElement: CoordinateType.TupleType) {
        var convertedCoordinate = CoordinateType(tuple: newElement)
        
        self.precision.convert(&convertedCoordinate)
        
        self.coordinates.append(convertedCoordinate)
    }
    
    /**
        Append the elements of `newElements` to this LinearRing.
     */
    public mutating func appendContentsOf<S : SequenceType where S.Generator.Element == CoordinateType.TupleType>(newElements: S) {
        
        var generator = newElements.generate()
        
        while let coordinate = generator.next() {
            var convertedCoordinate = CoordinateType(tuple: coordinate)
            
            self.precision.convert(&convertedCoordinate)
            
            self.coordinates.append(convertedCoordinate)
        }
    }
    
    /**
        Append the elements of `newElements` to this LinearRing.
     */
    public mutating func appendContentsOf<C : CollectionType where C.Generator.Element == CoordinateType.TupleType>(newElements: C) {
        
        var generator = newElements.generate()
        
        while let coordinate = generator.next() {
            var convertedCoordinate = CoordinateType(tuple: coordinate)
            
            self.precision.convert(&convertedCoordinate)
            
            self.coordinates.append(convertedCoordinate)
        }
    }
    
    /**
        Append the elements of `newElements` to this LinearRing.
     */
    public mutating func appendContentsOf<S : SequenceType where S.Generator.Element == CoordinateType>(newElements: S) {
        
        var generator = newElements.generate()
        
        while var coordinate = generator.next() {
            self.precision.convert(&coordinate)
            
            self.coordinates.append(coordinate)
        }
    }
    
    /**
        Append the elements of `newElements` to this LinearRing.
     */
    public mutating func appendContentsOf<C : CollectionType where C.Generator.Element == CoordinateType>(newElements: C) {
        
        var generator = newElements.generate()
        
        while var coordinate = generator.next() {
            self.precision.convert(&coordinate)
            
            self.coordinates.append(coordinate)
        }
    }
    
    /**
        Remove an element from the end of this LinearRing.
     
        - Requires: `count > 0`.
     */
    public mutating func removeLast() -> CoordinateType {
        return self.coordinates.removeLast()
    }

    /**
        Insert `newElement` at index `i` of this LinearRing.
     
        - Requires: `i <= count`.
     */
    public mutating func insert(newElement: CoordinateType.TupleType, atIndex i: Int) {
        var convertedCoordinate = CoordinateType(tuple: newElement)
        
        self.precision.convert(&convertedCoordinate)
        
        self.coordinates.insert(convertedCoordinate, atIndex: i)
    }
    
    /**
        Insert `newElement` at index `i` of this LinearRing.
     
        - Requires: `i <= count`.
     */
    public mutating func insert(newElement: CoordinateType, atIndex i: Int) {
        var convertedCoordinate = CoordinateType(other: newElement)
        
        self.precision.convert(&convertedCoordinate)
        
        self.coordinates.insert(convertedCoordinate, atIndex: i)
    }
    
    /**
        Remove and return the element at index `i` of this LinearRing.
     */
    public mutating func removeAtIndex(index: Int) -> CoordinateType {
        return self.coordinates.removeAtIndex(index)
    }
    
    /**
        Remove all elements of this LinearRing.
     
        - Postcondition: `capacity == 0` iff `keepCapacity` is `false`.
     */
    public mutating func removeAll(keepCapacity keepCapacity: Bool = true) {
        self.coordinates.removeAll(keepCapacity: keepCapacity)
    }
}

// MARK: CollectionType conformance

extension LinearRing : CollectionType, MutableCollectionType, _DestructorSafeContainer {
    
    /**
        Always zero, which is the index of the first element when non-empty.
     */
    public var startIndex : Int { return self.coordinates.startIndex }
    
    /**
        A "past-the-end" element index; the successor of the last valid subscript argument.
     */
    public var endIndex   : Int { return self.coordinates.endIndex }
    
    public subscript(position : Int) -> CoordinateType {
        
        get {
            return self.coordinates[position]
        }
        
        set (value) {
            var convertedCoordinate = CoordinateType(other: value)
            self.precision.convert(&convertedCoordinate)
            
            self.coordinates[position] = convertedCoordinate
        }
    }
    
    public subscript(range: Range<Int>) -> ArraySlice<CoordinateType> {
        get {
            return self.coordinates[range]
        }
        
        set (value) {
            // TODO: precision convert the values before putting them in
            self.coordinates[range] = value
        }
    }
    
    public func generate() -> IndexingGenerator<ContiguousArray<CoordinateType>> {
        return self.coordinates.generate()
    }
}

// MARK: CustomStringConvertible & CustomDebugStringConvertible Conformance

extension LinearRing : CustomStringConvertible, CustomDebugStringConvertible {
    
    public var description : String {
        return "\(self.dynamicType)(\(self.coordinates.description))"
    }
    
    public var debugDescription : String {
        return self.description
    }
}

