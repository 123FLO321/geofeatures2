///
///  LinearRing.swift
///
///  Copyright (c) 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 2/14/2016.
///
import Swift

///
/// NOTE: This file was auto generated by gyb from file CoordinateCollection.swift.gyb using the following command.
///
///     ~/gyb --line-directive '' -DSelf=LinearRing  -o LinearRing.swift CoordinateCollectionTypes.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///

///
/// LinearRing
///
/// A LinearRing is a Curve with linear interpolation between Coordinates. Each consecutive pair of
/// Coordinates defines a Line segment.
///
public struct LinearRing<CoordinateType: Coordinate & CopyConstructable> {

    public let precision: Precision
    public let coordinateSystem: CoordinateSystem

    ///
    /// Construct an empty `LinearRing`.
    ///
    /// - parameters:
    ///     - precision: The `Precision` model this `LinearRing` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `LinearRing` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    public init(precision: Precision = defaultPrecision, coordinateSystem: CoordinateSystem = defaultCoordinateSystem) {

        self.precision        = precision
        self.coordinateSystem = coordinateSystem
        self.coordinates      = []

        /// Note: No validation needed, an empty LinearRing is always valid.
    }

    ///
    /// Construct a LinearRing from another LinearRing (copy constructor).
    ///
    /// - parameters:
    ///     - other: The LinearRing of the same type that you want to construct a new LinearRing from.
    ///
    public init(other: LinearRing<CoordinateType>) {

        self.coordinateSystem = other.coordinateSystem
        self.precision        = other.precision
        self.coordinates      = other.coordinates

        /// Note: No validation needed, an as it's assumed the `other` LinearRing is valid.
    }

    ///
    /// Construct a LinearRing from another LinearRing (copy constructor) changing the precision and coordinateSystem.
    ///
    /// - parameters:
    ///     - other: The LinearRing of the same type that you want to construct a new LinearRing from.
    ///     - precision: The `Precision` model this `LinearRing` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `LinearRing` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    internal init(other: LinearRing<CoordinateType>, precision: Precision, coordinateSystem: CoordinateSystem) {

        self.coordinateSystem = coordinateSystem
        self.precision        = precision
        self.coordinates      = other.coordinates.map({ CoordinateType(other: $0, precision: precision) })

        /// Note: No validation needed, an as it's assumed the `other` LinearRing is valid.
    }

    ///
    /// Construct a `LinearRing` from a an `Array` of `CoordinateType`.
    ///
    /// - parameters:
    ///     - elements: An `Array` of `CoordinateType` coordinates.
    ///     - precision: The `Precision` model this `LinearRing` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `LinearRing` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    public init(elements: [CoordinateType], precision: Precision = defaultPrecision, coordinateSystem: CoordinateSystem = defaultCoordinateSystem) {

        self.precision        = precision
        self.coordinateSystem = coordinateSystem
        self.coordinates      = elements.map({ CoordinateType(other: $0, precision: precision) })
    }

    ///
    /// Construct a `LinearRing` from a any `Collection` type which holds `CoordinateType` objects.
    ///
    /// LinearRing can be constructed from any Swift.Collection type as
    /// long as it has an Element type equal the Coordinate type specified in Element.
    ///
    /// - parameters:
    ///     - elements: A `Collection` of `CoordinateType` coordinates.
    ///     - precision: The `Precision` model this `LinearRing` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `LinearRing` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    public init<C: Swift.Collection>(elements: C, precision: Precision = defaultPrecision, coordinateSystem: CoordinateSystem = defaultCoordinateSystem)
        where C.Iterator.Element == CoordinateType {

        self.precision        = precision
        self.coordinateSystem = coordinateSystem
        self.coordinates      = elements.map({ CoordinateType(other: $0, precision: precision) })
    }

    internal private(set) var coordinates: [CoordinateType]
}

///
/// TupleConvertible extensions
///
/// Coordinates that are TupleConvertible allow initialization via an ordinary Swift tuple.
///
extension LinearRing where CoordinateType: TupleConvertible {

    ///
    /// Construct a `LinearRing` from a any `Swift.Collection` type which holds `CoordinateType.TupleType` tuples.
    ///
    /// LinearRing can be constructed from any Swift.Collection type as
    /// long as it has an Element type equal the Coordinate types tuple specified
    /// in Element.
    ///
    /// - parameters:
    ///     - elements: A `Collection` of `CoordinateType.TupleType` coordinates.
    ///     - precision: The `Precision` model this `LinearRing` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `LinearRing` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    /// - seealso: `TupleConvertible`
    ///
    public init(elements: [CoordinateType.TupleType], precision: Precision = defaultPrecision, coordinateSystem: CoordinateSystem = defaultCoordinateSystem) {

        self.precision        = precision
        self.coordinateSystem = coordinateSystem
        self.coordinates      = elements.map({ CoordinateType(tuple: $0, precision: precision) })
    }

    ///
    /// Append `newElement` to LinearRing.
    ///
    public mutating func append(_ newElement: CoordinateType.TupleType) {
        self.append(CoordinateType(tuple: newElement))
    }

    ///
    /// Append the elements of `newElements` to this LinearRing.
    ///
    public mutating func append<C: Swift.Collection>(contentsOf newElements: C)
            where C.Iterator.Element == CoordinateType.TupleType {

        self.coordinates.reserveCapacity(numericCast(newElements.count) + coordinates.count)

        var Iterator = newElements.makeIterator()

        while let coordinate = Iterator.next() {
            self.append(CoordinateType(tuple: coordinate))
        }
    }

    ///
    /// Insert `newElement` at index `i` of this LinearRing.
    ///
    /// - Requires: `i <= count`.
    ///
    public mutating func insert(_ newElement: CoordinateType.TupleType, at i: Int) {
        self.insert(CoordinateType(tuple: newElement), at: i)
    }
}

// MARK: Collection conformance

extension LinearRing: Collection, MutableCollection {

    ///
    /// Returns the position immediately after `i`.
    ///
    /// - Precondition: `(startIndex..<endIndex).contains(i)`
    ///
    public func index(after i: Int) -> Int {
        return i+1
    }

    ///
    /// Always zero, which is the index of the first element when non-empty.
    ///
    public var startIndex: Int {
        return 0
    }

    ///
    /// A "past-the-end" element index; the successor of the last valid subscript argument.
    ///
    public var endIndex: Int {
        return coordinates.count
    }

    public subscript(index: Int) -> CoordinateType {
        get {
            /// Note: we rely on the array to return an error for any index out of range.
            return coordinates[index]
        }
        set (newElement) {
            /// Note: we rely on the array to return an error for any index out of range.
            coordinates[index] = CoordinateType(other: newElement, precision: precision)
        }
    }

    ///
    /// Append `newElement` to LinearRing.
    ///
    internal mutating func append(_ newElement: CoordinateType) {
        self.coordinates.append(CoordinateType(other: newElement, precision: precision))
    }

    ///
    /// Append the elements of `newElements` to this LinearRing.
    ///
    public mutating func append<C: Swift.Collection>(contentsOf newElements: C)
            where C.Iterator.Element == CoordinateType {

        self.coordinates.reserveCapacity(numericCast(newElements.count) + coordinates.count)

        var Iterator = newElements.makeIterator()

        while let coordinate = Iterator.next() {
            self.append(coordinate)
        }
    }

    ///
    /// Insert `newElement` at index `i` of this LinearRing.
    ///
    /// - Requires: `i <= count`.
    ///
    public mutating func insert(_ newElement: CoordinateType, at index: Int) {
        self.coordinates.insert(CoordinateType(other: newElement, precision: self.precision), at: index)
    }
}

// MARK: CustomStringConvertible & CustomDebugStringConvertible Conformance

extension LinearRing: CustomStringConvertible, CustomDebugStringConvertible {

    public var description: String {
        return "\(type(of: self))\(self.coordinates.description)"
    }

    public var debugDescription: String {
        return self.description
    }
}

// MARK: Equatable Conformance

extension LinearRing: Equatable {}

public func == <CoordinateType>(lhs: LinearRing<CoordinateType>, rhs: LinearRing<CoordinateType>) -> Bool {
    return lhs.equals(rhs)
}
