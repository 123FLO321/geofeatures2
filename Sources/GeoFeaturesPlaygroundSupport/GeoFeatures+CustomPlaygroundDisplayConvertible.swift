///
///  GeoFeatures+CustomPlaygroundDisplayConvertible.swift
///
/// Copyright (c) Tony Stone, All rights reserved.
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
/// Created by Tony Stone on 3/16/18.
///

///
/// NOTE: This file was auto generated by gyb from file GeometryCollection.swift.gyb using the following command.
///
///     ~/gyb --line-directive '' -o GeoFeatures+CustomPlaygroundDisplayConvertible.swift GeoFeatures+CustomPlaygroundDisplayConvertible.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///

#if os(OSX) || os(iOS)

import GeoFeatures
import GeoFeaturesQuartz

///
/// Point CustomPlaygroundDisplayConvertible implementation
///
extension Point: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// LineString CustomPlaygroundDisplayConvertible implementation
///
extension LineString: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// LinearRing CustomPlaygroundDisplayConvertible implementation
///
extension LinearRing: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// Polygon CustomPlaygroundDisplayConvertible implementation
///
extension Polygon: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// MultiPoint CustomPlaygroundDisplayConvertible implementation
///
extension MultiPoint: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// MultiLineString CustomPlaygroundDisplayConvertible implementation
///
extension MultiLineString: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// MultiPolygon CustomPlaygroundDisplayConvertible implementation
///
extension MultiPolygon: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}
///
/// GeometryCollection CustomPlaygroundDisplayConvertible implementation
///
extension GeometryCollection: CustomPlaygroundDisplayConvertible {

    public var playgroundDescription: Any {
        switch self.coordinateSystem {
        case is Cartesian:  return CartesianGeometryVisualizationView(geometry: self)
        case is Geographic: fallthrough      /// Fallthrough to default implementation until Map support is available.
        default:
            return String(describing: self)  /// Defaults to the default description should the coordinate system not be supported.
        }
    }
}

#endif

